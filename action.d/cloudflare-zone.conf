# fail2ban action file to dynamically manage a Cloudflare WAF custom rule
# for blocking IPs. This uses curl + jq against the Cloudflare Rulesets API.

[Definition]

# You must set these in your jail.local:
#   action = cloudflare-ruleset[cfzone="…", cftoken="…", cfrule="…"]
cfzone    = <cfzone>
cftoken  = <cftoken>
cfrule  = <cfrule>

# Working directory for state files (will be auto-created)
work_dir      = /var/run/fail2ban/cloudflare

# Internal Fail2ban vars
__fail2ban_name__ = cloudflare-zone
__name__          = %(name)s

cf_ruleset_id_file = %(work_dir)s/%(__fail2ban_name__)s-ruleset-id.txt
cf_lock_file       = %(work_dir)s/%(__fail2ban_name__)s-lock

# -----------------------------------------------------------------------------
# START: Create the working directory and fetch the ruleset ID once.
# -----------------------------------------------------------------------------
actionstart = \
    test -d %(work_dir)s || mkdir -p %(work_dir)s; \
    if [ ! -f "%(cf_ruleset_id_file)s" ]; then \
      CF_RULESET_ID=$$( \
        curl -fsS -X GET "https://api.cloudflare.com/client/v4/zones/%(cfzone)s/rulesets/phases/http_request_firewall_custom/entrypoint" \
          -H "Authorization: Bearer %(cftoken)s" \
      | jq -r '.result.id' \
      ); \
      [ -z "$$CF_RULESET_ID" ] && { \
        echo "Fail2ban[cloudflare]: unable to fetch ruleset ID" >&2; exit 1; \
      }; \
      echo "$$CF_RULESET_ID" > "%(cf_ruleset_id_file)s"; \
      echo "Fail2ban[cloudflare]: Ruleset ID fetched and cached." >&2; \
    fi

# -----------------------------------------------------------------------------
# BAN: Pull the full jail’s ban list and PATCH the CF rule.
# -----------------------------------------------------------------------------
actionban = \
    test -d %(work_dir)s || mkdir -p %(work_dir)s; \
    ( \
      flock -x 200; \
      # fetch+cache ruleset ID if needed \
      if [ ! -f "%(cf_ruleset_id_file)s" ]; then \
        CF_RULESET_ID=$$( \
          curl -fsS -X GET "https://api.cloudflare.com/client/v4/zones/%(cfzone)s/rulesets/phases/http_request_firewall_custom/entrypoint" \
            -H "Authorization: Bearer %(cftoken)s" \
          | jq -r '.result.id' \
        ); \
        [ -z "$$CF_RULESET_ID" ] && { \
          echo "Fail2ban[cloudflare]: unable to fetch ruleset ID" >&2; exit 1; \
        }; \
        echo "$$CF_RULESET_ID" > "%(cf_ruleset_id_file)s"; \
      fi; \
      CF_RULESET_ID=$$(cat "%(cf_ruleset_id_file)s"); \
      # get current rule + ID \
      CF_RULESET=$$( \
        curl -fsS -X GET "https://api.cloudflare.com/client/v4/zones/%(cfzone)s/rulesets/$$CF_RULESET_ID" \
          -H "Authorization: Bearer %(cftoken)s" \
      ); \
      RULE_JSON=$$(echo "$$CF_RULESET" | jq --arg name "%(cfrule)s" '.result.rules[] | select(.description == $name)'); \
      [ -z "$$RULE_JSON" ] && { \
        echo "Fail2ban[cloudflare]: rule '%(cfrule)s' not found" >&2; exit 1; \
      }; \
      RULE_ID=$$(echo "$$RULE_JSON" | jq -r '.id'); \
      # build full IP list from fail2ban-client \
      CURRENT_IP_LIST=$$(fail2ban-client status %(name)s | awk -F':[[:space:]]+' '/Banned IP list/ { print $$2 }'); \
      \
      FULL_IP_LIST_SPACE=$$(echo "$$CURRENT_IP_LIST" \
        | tr ' ' '\\n' \
        | grep -E '(^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$|^[0-9a-fA-F:]+$)' \
        | sort -u \
        | paste -sd " " - \
      ); \
      #[ -z "$$FULL_IP_LIST_SPACE" ] && FULL_IP_LIST_SPACE="127.0.0.1"; \
      EXPR="ip.src in {$$FULL_IP_LIST_SPACE}"; \
      PAYLOAD=$$(jq -n \
        --arg action "block" \
        --arg expr   "$$EXPR" \
        --arg desc   "%(cfrule)s" \
        --argjson enabled true \
        '{action: $action, expression: $expr, description: $desc, enabled: $enabled}' \
      ); \
      RESPONSE=$$( \
        curl -fsS -X PATCH "https://api.cloudflare.com/client/v4/zones/%(cfzone)s/rulesets/$$CF_RULESET_ID/rules/$$RULE_ID" \
          -H "Authorization: Bearer %(cftoken)s" \
          -H "Content-Type: application/json" \
          --data-binary "$$PAYLOAD" \
      ); \
      if echo "$$RESPONSE" | jq -e '.success' > /dev/null; then \
        echo "Fail2ban[cloudflare]: %(ip)s → blocked in CF" >&2; \
      else \
        echo "Fail2ban[cloudflare]: CF update failed:" >&2; \
        echo "$$RESPONSE" | jq '.errors // .messages // .' >&2; \
      fi; \
    ) 200>%(cf_lock_file)s

# -----------------------------------------------------------------------------
# UNBAN: Rebuild the list *after* removal and PATCH the CF rule.
# -----------------------------------------------------------------------------
actionunban = \
    ( \
      flock -x 200; \
      CF_RULESET_ID=$$(cat "%(cf_ruleset_id_file)s"); \
      CF_RULESET=$$( \
        curl -fsS -X GET "https://api.cloudflare.com/client/v4/zones/%(cfzone)s/rulesets/$$CF_RULESET_ID" \
          -H "Authorization: Bearer %(cftoken)s" \
      ); \
      RULE_JSON=$$(echo "$$CF_RULESET" | jq --arg name "%(cfrule)s" '.result.rules[] | select(.description == $name)'); \
      [ -z "$$RULE_JSON" ] && exit 0; \
      RULE_ID=$$(echo "$$RULE_JSON" | jq -r '.id'); \
      REMAINING=$$(fail2ban-client status %(name)s | awk -F':[[:space:]]+' '/Banned IP list/ { print $2 }'); \
      FULL_IP_LIST_SPACE=$$(echo "$$REMAINING" \
        | tr ' ' '\\n' \
        | grep -E '^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$' \
        | sort -u \
        | paste -sd " " - \
      ); \
      EXPR="ip.src in {$$FULL_IP_LIST_SPACE}"; \
      PAYLOAD=$$(jq -n \
        --arg action "block" \
        --arg expr   "$$EXPR" \
        --arg desc   "%(cfrule)s" \
        --argjson enabled true \
        '{action: $action, expression: $expr, description: $desc, enabled: $enabled}' \
      ); \
      RESPONSE=$$( \
        curl -fsS -X PATCH "https://api.cloudflare.com/client/v4/zones/%(cfzone)s/rulesets/$$CF_RULESET_ID/rules/$$RULE_ID" \
          -H "Authorization: Bearer %(cftoken)s" \
          -H "Content-Type: application/json" \
          --data-binary "$$PAYLOAD" \
      ); \
      if echo "$$RESPONSE" | jq -e '.success' > /dev/null; then \
        echo "Fail2ban[cloudflare]: %(ip)s → unblocked in CF" >&2; \
      else \
        echo "Fail2ban[cloudflare]: CF update failed:" >&2; \
        echo "$$RESPONSE" | jq '.errors // .messages // .' >&2; \
      fi; \
    ) 200>%(cf_lock_file)s

# -----------------------------------------------------------------------------
# STOP: Clean up temporary files.
# -----------------------------------------------------------------------------
actionstop = \
    rm -f "%(cf_ruleset_id_file)s" "%(cf_lock_file)s"